@mixin animation(
  $name,
  $duration,
  $delay: 0s,
  $count: 1,
  $direction: normal,
  $timing: ease-in,
  $mode: forwards,
  $state: running) {
    /// Mixin applies animation to selector with passed params
    /// It will generate shorted syntax for animation (animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode Ð¸ animation-play-state)
    /// Output also will have -webkit prefix
    ///
    /// @author nightrunner91
    /// 
    /// @link https://github.com/nightrunner91/nightvue
    /// @link https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Animations/
    ///
    /// @param $name:      { String } [animation name]
    /// @param $duration:  { Number | String } [s | ms | system speed]
    /// @param $delay:     { Number } [s | ms, default: 0s]
    /// @param $count:     { Number | String } [Number | infinite, default: 1]
    /// @param $direction: { String } [normal | reverse | alternate | alternate-reverse, default: normal]
    /// @param $timing:    { String } [easing type | system easing, default: ease-in]
    /// @param $mode:      { String } [forwards | backwards | both, default: forwards]
    /// @param $state:     { String } [running | paused | default: running]
    /// 
    /// @example
    ///   @include animation(
    ///     $name: spin,
    ///     $duration: 2s
    ///   );
    ///
    /// @output
    ///   animation: spin 2s cubic-bezier(0.42, 0, 1, 1) 0s 1 normal forwards;
    ///
    /// @example
    ///   @include animation(
    ///     $name: spin,
    ///     $duration: slow,
    ///     $delay: 1s,
    ///     $count: infinite,
    ///     $direction: reverse,
    ///     $timing: emphasized
    ///     $state: paused
    ///   );
    ///
    /// @output
    ///   animation: spin 0.375s cubic-bezier(0, 0, 0.2, 1) 1s infinite reverse forwards paused;

    $animation: (
      $name,
      $duration,
      $timing,
      $delay,
      $count,
      $direction,
      $mode,
      $state
    );

    @if map-has-key($transition-speed, $duration) {
      $animation: replace-in-list($animation, $duration, map-get($transition-speed, $duration))
    }

    @if map-has-key($transition-timings, $timing) {
      $animation: replace-in-list($animation, $timing, map-get($transition-timings, $timing))
    }

    animation: to-string($animation, ' ');
};

@mixin font-face(
  $font-name,
  $font-file,
  $font-weight: 400, 
  $font-style: normal, 
  $support-required: 'modern') {
  /// Mixin that imports fonts to your project
  /// 
  /// @author David Pollet
  /// 
  /// @link https://codepen.io/davidpollet/pen/ORyYap/?js-preprocessor=babel
  /// @link https://css-tricks.com/snippets/css/using-font-face/
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/@font-face
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/font-style
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/font-weight
  /// @link https://fonts.google.com/
  /// 
  /// @param $font-name:        { String }, [name of font, be sure to save your font files in so-called folder]
  /// @param $font-file:        { String }, [file name, for example : 'RobotoBold']
  /// @param $font-weight:      { Number }, [font-weight, 100...900, default: 400]
  /// @param $font-style:       { String }, [font-style, default: normal]
  /// @param $support-required: { String }, [additional formats that must be included, oldie | recent | modern]
  /// 
  /// @example
  ///   @include font-face('Roboto', 'RobotoRegular');
  ///   @include font-face('Roboto', 'RobotoBold', 700, normal, 'recent');
  ///   @include font-face('Montserrat', 'MontserratBoldItalic', 700, italic, 'recent');

  @font-face {
    font-family: $font-name;
    font-style : $font-style;
    font-weight: $font-weight;

    @if $support-required == 'oldie' {
      src: url('@/assets/fonts/#{$font-name}/#{$font-file}.eot');
      src: url('@/assets/fonts/#{$font-name}/#{$font-file}.eot?#iefix') format('embedded-opentype'),
      url('@/assets/fonts/#{$font-name}/#{$font-file}.woff2') format('woff2'),
      url('@/assets/fonts/#{$font-name}/#{$font-file}.woff') format('woff'),
      url('@/assets/fonts/#{$font-name}/#{$font-file}.ttf') format('truetype');
    }
    @if $support-required == 'recent' {
      src: url('@/assets/fonts/#{$font-name}/#{$font-file}.woff2') format('woff2'),
      url('@/assets/fonts/#{$font-name}/#{$font-file}.woff') format('woff'),
      url('@/assets/fonts/#{$font-name}/#{$font-file}.ttf') format('truetype');
    }
    @if $support-required == 'modern' {
      src: url('@/assets/fonts/#{$font-name}/#{$font-file}.woff2') format('woff2'),
      url('@/assets/fonts/#{$font-name}/#{$font-file}.woff') format('woff');
    }
  }
  @if $support-required != 'oldie' and $support-required != 'recent' and $support-required != 'modern' {
    @error 'Invalid support-required value. Must be "oldie"==>IE8 and above/ Android native browser 4+/ Safari 4.3 OR "recent"==>IE9+/ Android native browser 4.0+/ Safari 4.3+ OR "modern"==>IE9+/ Android native browser 4.4+/ Safari 5.1+';
  }
};

@mixin linear-gradient($name) {
  /// Mixin generates code that includes the default color for browsers 
  /// that do not support linear gradients and modern syntax
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://caniuse.com/?search=linear-gradient
  /// @link https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient
  /// @link https://www.colorzilla.com/gradient-editor/
  ///
  /// @param $name: { String } [name of gradient in $gradients map]
  /// 
  /// @example
  ///   @include linear-gradient('primary_success');
  ///
  /// @output
  ///   background: #682cab;
  ///   background: linear-gradient(145deg, #8e51d2 10%, #68c279 80%);

  @if map-has-key($gradients, quote($name)) {
    $target: map-get($gradients, $name);

    $direction: nth(nth($target, 1), 2);
    $fallback:  nth(nth($target, 2), 2);
    $list:      nth(nth($target, 3), 2);

    background: $fallback;
    background: linear-gradient($direction, $list);
  } @else {
    @debug 'No such gradient, check $gradients map in variables.scss file'
  }
};

@mixin pseudoelem() {
  /// Often you need to add &:before or &:after for decoration purposes
  /// Just for that you have this small mixin to simplify your work
  ///
  /// @example
  ///   @include pseudoelem();

  content: '';
  display: block;
  position: absolute;
}

@mixin selection($background, $color) {
  /// This code will define styles of text selection across all website
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/::selection
  ///
  /// @example
  ///   @include selection('black', 'white');

  ::-moz-selection {
    background-color: $background;
    color: $color;
  }
  
  ::selection {
    background-color: $background;
    color: $color;
  }
}
