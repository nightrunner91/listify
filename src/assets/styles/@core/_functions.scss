@function spacer($val1, $val2: false, $val3: false, $val4: false) {
  /// Function returns specified spacer value from $spacers map
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  ///
  /// @param $val1: { Number | String }, [spacer value, required]
  /// @param $val2: { Number | String }, [spacer value]
  /// @param $val3: { Number | String }, [spacer value]
  /// @param $val4: { Number | String }, [spacer value]
  ///
  /// If you pass one param it will return spacer value from $spacers map
  /// If you pass two params it will return X and Y spacer values
  /// If you pass four params it will return top, right, bottom and left spacer values
  /// Possible variants of params by default are: 0, 25, 50, 75, 1, 2, 3, 4, 5 and auto
  /// 
  /// @example
  ///   padding: spacer(2);
  ///   padding-right: spacer(1);
  ///   margin: spacer(3, auto);
  ///   margin: spacer(50, auto, 2, 0);
  ///
  /// @output
  ///   padding: 2rem;
  ///   padding-right: 1rem;
  ///   margin: 3rem auto;
  ///   margin: .5rem auto 2rem 0;

  @if ($val2 and $val4 == false) {
    @return map-get($spacers, $val1) map-get($spacers, $val2);
  }
  @else if ($val2 and $val4) {
    @return map-get($spacers, $val1) map-get($spacers, $val2) map-get($spacers, $val3) map-get($spacers, $val4);
  }
  @else {
    @return map-get($spacers, $val1)
  }
};

@function opacity($level) {
  /// Function returns specified opacity value from $opacities map
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  ///
  /// @param $level: { String }, [opacity value, required]
  /// 
  /// @example
  ///   opacity: opacity(0);
  ///   opacity: opacity(25);
  ///   opacity: opacity(100);
  ///
  /// @output
  ///   opacity: 0;
  ///   opacity: .25;
  ///   opacity: 1;
  
  @return strip-unit(map-get($opacities, $level)) / 100
};

@function transition($property, $speed:base, $timing:ease, $delay:0s) {
  /// Function returns transition based on $speed, $timings and $delay params
  /// It searches params in $transition-speed and $transition-timings maps
  /// But you could pass whatever you want
  /// We advice you to pass predefined $speed and $timing values tho
  /// If you need to apply many transitions at once,
  /// we recomed to use complex-transition() func below this one
  ///
  /// @author nightrunner91
  ///
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Transitions/
  /// @link https://caniuse.com/?search=transition
  ///
  /// @param $property: { String },          [transition-property, required]
  /// @param $speed:    { String | Number }, [transition-speed, default 'base' => .3s]
  /// @param $timing:   { String },          [transition-timing-function, default 'ease']
  /// @param $delay:    { Number },          [transition-delay, default 0s]
  ///
  /// @example
  ///   transition: transition(transform);
  ///   transition: transition(opacity, short, ease-in);
  ///   transition: transition(background-color, slow, emphasized);
  ///   transition: transition(color, lazy, linear, 1s);
  ///   transition: transition(box-shadow, 2s, cubic-bezier(.08,1.04,.82,-0.73));
  ///
  /// @output
  ///   transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
  ///   transition: opacity 0.25s cubic-bezier(0.42, 0, 1, 1);
  ///   transition: background-color 0.375s cubic-bezier(0, 0, 0.2, 1);
  ///   transition: color 0.75s cubic-bezier(0, 0, 1, 1) 1s;
  ///   transition: box-shadow 2s cubic-bezier(.08,1.04,.82,-0.73);

  $prepSpeed: $speed;
  $prepTiming: $timing;

  @if map-has-key($transition-speed, $speed) {
    $prepSpeed: map-get($transition-speed, $speed)
  }

  @if map-has-key($transition-speed, $speed) {
    $prepTiming: map-get($transition-timings, $timing)
  }

  $delayCond: if($delay != 0s, $delay, null);

  @return $property $prepSpeed $prepTiming $delayCond
};

@function complex-transition($args...) {
  /// Function that can apply many transition properties to selector
  /// It uses transition() function which returns needed transition properties
  /// from $transition-speed and $transition-timings maps
  ///
  /// @author nightrunner91
  ///
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Transitions/
  /// @link https://caniuse.com/?search=transition
  ///
  /// @param $args: { Array }, [list of transition funtions, required]
  ///
  /// @example
  ///   transition: complex-transition(
  ///     transition(opacity, short, ease-in),
  ///     transition(background-color, slow, emphasized),
  ///     transition(color, lazy, linear, 1s),
  ///   );
  ///
  /// @output
  ///   transition: opacity 0.25s cubic-bezier(0.42, 0, 1, 1), background-color 0.375s cubic-bezier(0, 0, 0.2, 1), color 0.75s cubic-bezier(0, 0, 1, 1) 1s;

  @return $args;
};
